let [PATTERN];

let size = 100;

let main {
    size < 3? -> {
        >> "Size is too small!";
    }

    let i = 0;
    i < size - 1? {
        [PATTERN, 0];

        i <- i + 1;
        i < size - 1? ^^;
    }

    [PATTERN, 1];

    let i = size - 1;
    dump();
    i? {
        step();
        dump();
        i <- i - 1;
        i? ^^;
    }
}

let step {
    let a = 0;
    let b = 0;
    let c = [!PATTERN];

    let n = size;
    {
        a <- b;
        b <- c;
        c <- {
            n = 1? -> 0;
            -> [!PATTERN];
        }

        [PATTERN, result(a, b, c)];

        n <- n - 1;
        n? ^^;
    }
}

let result(a, b, c) {
    a? b? c? -> 0;
    !b? !c? -> 0;
    -> 1;
}

let dump {
    let n = [PATTERN];
    n? {
        let x = [!PATTERN];

        dump_cell(x);
        [PATTERN, x];

        n <- n - 1;
        n? ^^;
    }
    >> '\n';
}

let dump_cell(n) {
    n = 0? >> '.';
    n = 1? >> '#';
}